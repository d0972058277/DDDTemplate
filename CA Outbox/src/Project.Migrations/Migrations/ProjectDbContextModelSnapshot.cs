// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Project.Infrastructure;

#nullable disable

namespace Project.Migrations.Migrations
{
    [DbContext(typeof(ProjectDbContext))]
    partial class ProjectDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Project.Domain.Aggregates.DeviceAggregate.Device", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.HasKey("Id");

                    b.ToTable("Device", (string)null);
                });

            modelBuilder.Entity("Project.Domain.Aggregates.DeviceAggregate.Notification", b =>
                {
                    b.Property<long>("AutoIncrementPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("DeviceId")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AutoIncrementPK");

                    b.HasIndex("DeviceId", "Id")
                        .IsUnique();

                    b.ToTable("DeviceNotification", (string)null);
                });

            modelBuilder.Entity("Project.Domain.Aggregates.NotificationAggregate.Device", b =>
                {
                    b.Property<long>("AutoIncrementPK")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    b.Property<Guid>("Id")
                        .HasColumnType("char(36)");

                    b.Property<Guid>("NotificationId")
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("ReadTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("AutoIncrementPK");

                    b.HasIndex("NotificationId", "Id")
                        .IsUnique();

                    b.ToTable("NotificationDevice", (string)null);
                });

            modelBuilder.Entity("Project.Domain.Aggregates.NotificationAggregate.Notification", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<DateTime?>("PushedTime")
                        .HasColumnType("datetime(6)");

                    b.HasKey("Id");

                    b.ToTable("Notification", (string)null);
                });

            modelBuilder.Entity("Project.Infrastructure.IntegrationEvents.Models.IntegrationEventEntry", b =>
                {
                    b.Property<Guid>("EventId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char(36)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<DateTime>("CreationTimestamp")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("EventTypeName")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasMaxLength(32)
                        .HasColumnType("varchar(32)");

                    b.Property<int>("TimesSent")
                        .HasColumnType("int");

                    b.Property<Guid>("TransactionId")
                        .HasColumnType("char(36)");

                    b.HasKey("EventId");

                    b.HasIndex("CreationTimestamp");

                    b.HasIndex("TransactionId");

                    b.ToTable("IntegrationEvent", (string)null);
                });

            modelBuilder.Entity("Project.Domain.Aggregates.DeviceAggregate.Device", b =>
                {
                    b.OwnsOne("Project.Domain.Aggregates.DeviceAggregate.Token", "Token", b1 =>
                        {
                            b1.Property<Guid>("DeviceId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("DeviceId");

                            b1.ToTable("Device");

                            b1.WithOwner()
                                .HasForeignKey("DeviceId");
                        });

                    b.Navigation("Token")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Domain.Aggregates.DeviceAggregate.Notification", b =>
                {
                    b.HasOne("Project.Domain.Aggregates.DeviceAggregate.Device", null)
                        .WithMany("Notifications")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Domain.Aggregates.NotificationAggregate.Device", b =>
                {
                    b.HasOne("Project.Domain.Aggregates.NotificationAggregate.Notification", null)
                        .WithMany("Devices")
                        .HasForeignKey("NotificationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Domain.Aggregates.NotificationAggregate.Notification", b =>
                {
                    b.OwnsOne("Project.Domain.Aggregates.NotificationAggregate.Message", "Message", b1 =>
                        {
                            b1.Property<Guid>("NotificationId")
                                .HasColumnType("char(36)");

                            b1.Property<string>("Body")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.Property<string>("Title")
                                .IsRequired()
                                .HasColumnType("longtext");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.OwnsOne("Project.Domain.Aggregates.NotificationAggregate.Schedule", "Schedule", b1 =>
                        {
                            b1.Property<Guid>("NotificationId")
                                .HasColumnType("char(36)");

                            b1.Property<DateTime>("Value")
                                .HasColumnType("datetime(6)");

                            b1.HasKey("NotificationId");

                            b1.ToTable("Notification");

                            b1.WithOwner()
                                .HasForeignKey("NotificationId");
                        });

                    b.Navigation("Message")
                        .IsRequired();

                    b.Navigation("Schedule")
                        .IsRequired();
                });

            modelBuilder.Entity("Project.Domain.Aggregates.DeviceAggregate.Device", b =>
                {
                    b.Navigation("Notifications");
                });

            modelBuilder.Entity("Project.Domain.Aggregates.NotificationAggregate.Notification", b =>
                {
                    b.Navigation("Devices");
                });
#pragma warning restore 612, 618
        }
    }
}
